#include<iostream>
#include<queue>
#include<utility>

using namespace std;

#define L 20
#define B 20
#define MAX_FLOOR 10

int tot_vol = 0;
int cur_vol = 0;
/*
int a[][B] = {
              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
              0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
              0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,
              0,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,0,
              0,1,2,3,4,4,4,4,4,4,4,4,4,4,4,4,3,2,1,0,
              0,1,2,3,4,5,5,5,5,5,5,5,5,5,5,4,3,2,1,0,
              0,1,2,3,4,5,6,6,6,6,6,6,6,6,5,4,3,2,1,0,
              0,1,2,3,4,5,6,7,7,7,7,7,7,6,5,4,3,2,1,0,
              0,1,2,3,4,5,6,7,8,8,8,8,7,6,5,4,3,2,1,0,
              0,1,2,3,4,5,6,7,8,9,9,8,7,6,5,4,3,2,1,0,
              0,1,2,3,4,5,6,7,8,9,9,8,7,6,5,4,3,2,1,0,
              0,1,2,3,4,5,6,7,8,8,8,8,7,6,5,4,3,2,1,0,
              0,1,2,3,4,5,6,7,7,7,7,7,7,6,5,4,3,2,1,0,
              0,1,2,3,4,5,6,6,6,6,6,6,6,6,5,4,3,2,1,0,
              0,1,2,3,4,5,5,5,5,5,5,5,5,5,5,4,3,2,1,0,
              0,1,2,3,4,4,4,4,4,4,4,4,4,4,4,4,3,2,1,0,
              0,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,0,
              0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,
              0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
             };
*/
int a[][B] = {
              9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
              9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,
              9,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,9,
              9,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,0,
              9,1,2,3,4,4,4,4,4,4,4,4,4,4,4,4,3,2,1,0,
              9,1,2,3,4,5,5,5,5,5,5,5,5,5,5,4,3,2,1,0,
              9,1,2,3,4,5,3,3,3,3,3,3,3,3,5,4,3,2,1,0,
              9,1,2,3,4,5,3,2,2,2,2,2,2,3,5,4,3,2,1,0,
              9,1,2,3,4,5,3,2,1,1,1,1,2,3,5,4,3,2,1,0,
              9,1,2,3,4,5,3,2,1,0,0,1,2,3,5,4,3,2,1,0,
              9,1,2,3,4,5,3,2,1,0,0,1,2,3,5,4,3,2,1,0,
              9,1,2,3,4,5,3,2,1,1,1,1,2,3,5,4,3,2,1,0,
              9,1,2,3,4,5,3,2,2,2,2,2,2,3,5,4,3,2,1,0,
              9,1,2,3,4,5,3,3,3,3,3,3,3,3,5,4,3,2,1,0,
              9,1,2,3,4,5,5,5,5,5,5,5,5,5,5,4,3,2,1,0,
              9,1,2,3,4,4,4,4,4,4,4,4,4,4,4,4,3,2,1,0,
              9,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,0,
              9,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,9,
              9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,
              9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
             };

/*
int a[][B] = {
               2,2,2,2,2,2,
               2,1,1,1,1,2,
               2,1,0,0,1,2,
               2,1,0,0,1,2,
               2,1,1,1,1,2,
               2,2,2,2,2,2
             };
*/
char vv[L][B]; //Lookup for visited locs.
bool isBoundaryRegion = 0;

void bfs(queue<pair<int,int> > &q, int f) {
    while(!q.empty()) {
        pair<int,int> c = q.front();
        q.pop();
        int x = c.first; int y = c.second;
//        if ((x == 8) && (y ==8)) {
//            cout << "Amit " << a[x][y] << endl;
//        }
        if ( a[x][y] == f ) {
            if ((x == 0) || (x == L-1) || (y == 0) || (y == B-1)) {
                isBoundaryRegion = 1;
            }
            if ((x > 0) && (vv[x-1][y] == 0)) {
                q.push(make_pair(x-1,y));
            }
            if ((y > 0) && (vv[x][y-1] == 0)) {
                q.push(make_pair(x,y-1));
            }
            if ((x < L-1) && (vv[x+1][y] == 0)) {
                q.push(make_pair(x+1,y));
            }
            if ((y < B-1) && (vv[x][y+1] == 0)) {
                q.push(make_pair(x,y+1));
            }
            a[x][y] += 1;
            cur_vol += 1;
        }
        vv[x][y] = 1;
    }
}

void check_bound_region(int floor) {
    queue<pair<int,int> > qu;
    qu.push(make_pair(0,0));
    while(!qu.empty()) {
        bfs(qu, floor);
        if (!isBoundaryRegion) {
            tot_vol += cur_vol;
        }
        for (int i=0; i<L ;i++) {
            for (int j=0; j<B ;j++) {
                if (vv[i][j] == 0) {
                    qu.push(make_pair(i,j));
                    //cout << i << " " << j << " " << qu.size() << endl;
                    i=L;j=B;
                }
            }
        }
        cur_vol = 0;
        isBoundaryRegion = 0;
    }
}

int main() {
    for (int i = 0; i<MAX_FLOOR ; i++) {
        memset(vv,0,L*B);
        check_bound_region(i);
        cout << "checking for floor " << i <<  " "<< tot_vol <<endl;
    }
    cout << "Volume of rain water is " << tot_vol;
    return 0;
}
